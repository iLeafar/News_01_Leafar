(venv) PS C:\users\rafa0\pycharmprojects\newspaper_leafar077\newspaper> python manage.py makemigrations
Migrations for 'news':
    - Create model Author
    - Create model Category
    - Create model Post
    - Create model PostCategory
    - Create model Comment
(venv) PS C:\users\rafa0\pycharmprojects\newspaper_leafar077\newspaper> python manage.py migrate   
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, news, sessions
Running migrations:
  Applying news.0001_initial... OK
(venv) PS C:\users\rafa0\pycharmprojects\newspaper_leafar077\newspaper>  python manage.py shell
Python 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from news.models import *
>>> u1 = User.objects.create_user('Den') 
>>> u2 = User.objects.create_user('Dima') 
>>> u1
<User: Den>
>>> u2
<User: Dima>
>>> Author.objects.create(authorUser=u1)
<Author: Author object (1)>
>>> Author.objects.create(authorUser=u2) 
<Author: Author object (2)>
>>> Category.objects.create(name='Health')
<Category: Category object (1)>
>>> Category.objects.create(name='Sport')  
<Category: Category object (2)>
>>> Category.objects.create(name='Social')  
<Category: Category object (3)>
>>> Category.objects.create(name='Tourism')
<Category: Category object (4)>
>>> author=Author.objects.get(id=1)
>>> author
<Author: Author object (1)>
>>> Post.objects.create(author=author, categoryType='NW', title='How to make some interesting thing', text='just do it')
<Post: Post object (1)>
>>> Post.object.get(id=1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Post' has no attribute 'object'
>>> Post.objects.get(id=1) 
<Post: Post object (1)>
>>> Post.objects.get(id=1).title
'How to make some interesting thing'
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2)) 
>>> author                                                                                                               
<Author: Author object (1)>
>>> Post.objects.create(author=author, categoryType='AR', title='Where will we go at summer', text='unfortunatly just on your village') 
<Post: Post object (2)>
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=4)) 
>>> author=Author.objects.get(id=2)                                                                                                     
>>> author
<Author: Author object (2)>
>>> Post.objects.create(author=author, categoryType='AR', title='The most popular sportgirl in Russia', text='The most popular sportgirl in Russia is your choise') 
<Post: Post object (3)>
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3))                                                                                             
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=1)) 
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='вот ты обрадовал') 
<Comment: Comment object (1)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='мне и так не плохо') 
<Comment: Comment object (2)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='комментарий для рейтинга') 
<Comment: Comment object (3)>
>>> Comment.objects.create(commentPost=Comment.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='комментарий для рейтинга') 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\query.py", line 512, in create
    obj = self.model(**kwargs)
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\base.py", line 541, in __init__
    _setattr(self, field.name, rel_obj)
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\fields\related_descriptors.py", line 235, in __set__
    raise ValueError(
ValueError: Cannot assign "<Comment: Comment object (1)>": "Comment.commentPost" must be a "Post" instance.
>>> Comment.objects.create(commentPost=Post.objects.get(id=4), commentUser=Author.objects.get(id=1).authorUser, text='Zagitova rull')               
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\query.py", line 496, in get
    raise self.model.DoesNotExist(
news.models.Post.DoesNotExist: Post matching query does not exist.
>>> author=Author.objects.get(id=2)                                                                                                                                 
>>> author                                                              
<Author: Author object (2)>
>>> author=Author.objects.get(id=1)                                                                                                                                 
>>> Comment.objects.create(commentPost=Post.objects.get(id=4), commentUser=Author.objects.get(id=1).authorUser, text='Zagitova rull')
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\query.py", line 496, in get
    raise self.model.DoesNotExist(
news.models.Post.DoesNotExist: Post matching query does not exist.
>>> Comment.objects.create(commentPost=Post.objects.get(id=4), commentUser=Author.objects.get(id=2).authorUser, text='Zagitova rull') 
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\query.py", line 496, in get
    raise self.model.DoesNotExist(
news.models.Post.DoesNotExist: Post matching query does not exist.
>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='Zagitova rull') 
<Comment: Comment object (4)>
>>> Comment.objects.get(id=1).rating
0
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=2).dislike()
>>> Post.objects.get(id=4).like()       
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "C:\Users\rafa0\PycharmProjects\Newspaper_Leafar077\venv\lib\site-packages\django\db\models\query.py", line 496, in get
    raise self.model.DoesNotExist(
news.models.Post.DoesNotExist: Post matching query does not exist.
>>> Post.objects.get(id=3).like() 
>>> Post.objects.get(id=2).like() 
>>> Post.objects.get(id=2).like()
>>> Post.objects.get(id=1).dislike() 
>>> Post.objects.get(id=1).dislike()
>>> Post.objects.get(id=1).dislike()
>>> Post.objects.get(id=1).dislike()
>>> Post.objects.get(id=1).dislike()
>>> Post.objects.get(id=1).rating   
-5
>>> a=Author.objects.get(id=1) 
>>> a.update_rating()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\users\rafa0\pycharmprojects\newspaper_leafar077\newspaper\news\models.py", line 18, in update_rating
    cRat += commentRat.get('commentRating')
TypeError: unsupported operand type(s) for +=: 'int' and 'NoneType'
>>> a.update_rating()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\users\rafa0\pycharmprojects\newspaper_leafar077\newspaper\news\models.py", line 18, in update_rating
    cRat += commentRat.get('commentRating')
TypeError: unsupported operand type(s) for +=: 'int' and 'NoneType'
>>> a=Author.objects.get(id=2) 
>>> a.update_rating()          
>>> a.ratingAuthor
4
>>> a=Author.objects.get(id=1) 
>>> a.update_rating()          
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\users\rafa0\pycharmprojects\newspaper_leafar077\newspaper\news\models.py", line 18, in update_rating
    cRat += commentRat.get('commentRating')
TypeError: unsupported operand type(s) for +=: 'int' and 'NoneType'
>>> Post.objects.get(id=1).like()    
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=1).like()
>>> a.update_rating()             
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "C:\users\rafa0\pycharmprojects\newspaper_leafar077\newspaper\news\models.py", line 18, in update_rating
    cRat += commentRat.get('commentRating')
TypeError: unsupported operand type(s) for +=: 'int' and 'NoneType'
>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='some people just did it') 
<Comment: Comment object (5)>
>>> Comment.objects.get(id=5).like()                                                                                                            
>>> Comment.objects.get(id=5).like()
>>> a.update_rating()                                                                                                                           
>>> a.ratingAuthor
5
>>> a=Author.objects.get(id=1)                                                                                                                  
>>> a.ratingAuthor             
5
>>> a.update_rating()
>>> a.ratingAuthor                
5
>>> a=Author.objects.get(id=2)
>>> a.update_rating()          
>>> a.ratingAuthor                                                                                                                    
4
>>> x = Author.objects.order_by('-ratingAuthor')[:1]
>>> x
<QuerySet [<Author: Author object (1)>]>
>>> for i in x :
... i.authorUser.username
  File "<console>", line 2
    i.authorUser.username
    ^
IndentationError: expected an indented block
>>> fori in x :
  File "<console>", line 1
    fori in x :
              ^
SyntaxError: invalid syntax
>>> for i in x :
...     i.authorUser.username
...     i.ratingAuthor
... 
'Den'
5
>>> z = Post.objects.order_by('-rating')[:1]     
>>> z
<QuerySet [<Post: Post object (2)>]>
>>> for i in z:                                    
...     i.dateCreation                             
...     i.title    hor    ame
...     i.preview()
...                ion
... 
datetime.datetime(2022, 4, 12, 23, 16, 28, 155164, tzinfo=datetime.timezone.utc)
'Where will we go at summer'
'unfortunatly just on your village...'

